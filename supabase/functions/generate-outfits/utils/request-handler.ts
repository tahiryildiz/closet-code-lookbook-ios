
import { corsHeaders, createResponse } from './cors.ts';
import { createOutfitPrompt } from './prompt-generator.ts';
import { processValidatedOutfits } from './enhanced-processor.ts';
import { generateFallbackOutfits } from './fallback-generator.ts';

export async function handleOutfitGeneration(requestData: any, openAIApiKey: string) {
  const { occasion, timeOfDay, weather, wardrobeItems, userGender } = requestData;

  console.log('🚀 KombinAI: STRICT outfit generation started');
  console.log('📊 Parameters:', { occasion, timeOfDay, weather, userGender, wardrobeCount: wardrobeItems?.length });
  
  if (wardrobeItems && wardrobeItems.length > 0) {
    console.log('👕 Wardrobe items:', wardrobeItems.map((item: any) => ({
      name: item.name,
      category: item.category,
      color: item.primary_color || item.color
    })));
  }

  // Validate required parameters
  if (!occasion || !timeOfDay || !weather) {
    throw new Error('Missing required parameters');
  }

  if (!wardrobeItems || wardrobeItems.length === 0) {
    throw new Error('No wardrobe items provided');
  }

  // Create ULTRA-STRICT prompt with exact item names and gender context
  const prompt = createOutfitPrompt(wardrobeItems, occasion, timeOfDay, weather, userGender);
  console.log('📝 Generated prompt (preview):', prompt.substring(0, 500) + '...');

  console.log('🤖 Sending STRICT validation prompt to AI with gender context...');

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${openAIApiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'gpt-4o-mini',
      messages: [
        { 
          role: 'system', 
          content: `Sen KombinAI profesyonel stil danışmanısın. KESINLIKLE SADECE verilen gardroba ürünlerini kullan. Ürün isimlerini TAM OLARAK AYNI ŞEKİLDE yaz. Başka ürün EKLEME veya DEĞİŞTİRME. Kullanıcının cinsiyetine uygun stil önerileri ver. SADECE geçerli JSON döndür.` 
        },
        { role: 'user', content: prompt }
      ],
      temperature: 0.1, // Minimum temperature for maximum consistency
      max_tokens: 1500,
    }),
  });

  console.log('🤖 AI response status:', response.status);

  if (!response.ok) {
    const errorText = await response.text();
    console.error('❌ OpenAI API error:', response.status, errorText);
    throw new Error(`OpenAI API error: ${response.status}`);
  }

  const data = await response.json();
  let generatedContent = data.choices[0].message.content;

  console.log('🤖 Raw AI response:', generatedContent);

  // Clean JSON response
  generatedContent = generatedContent.trim();
  if (generatedContent.startsWith('```json')) {
    generatedContent = generatedContent.replace(/```json\n?/, '').replace(/\n?```$/, '');
  }
  if (generatedContent.startsWith('```')) {
    generatedContent = generatedContent.replace(/```\n?/, '').replace(/\n?```$/, '');
  }

  try {
    const parsedOutfits = JSON.parse(generatedContent);
    
    if (!parsedOutfits.outfits || parsedOutfits.outfits.length === 0) {
      throw new Error('No outfits generated by AI');
    }

    console.log('🎯 AI generated outfits:', parsedOutfits.outfits.length);
    console.log('📋 Outfit preview:', parsedOutfits.outfits.map((o: any) => ({
      name: o.name,
      items: o.items
    })));

    // Process with ULTRA-STRICT validation
    const validatedOutfits = await processValidatedOutfits(
      parsedOutfits.outfits, 
      wardrobeItems, 
      occasion, 
      timeOfDay, 
      weather, 
      openAIApiKey
    );

    if (validatedOutfits.length === 0) {
      console.log('❌ ALL AI OUTFITS FAILED VALIDATION - Using safe fallback');
      const fallbackOutfits = generateFallbackOutfits(wardrobeItems, occasion, weather);
      
      return {
        outfits: fallbackOutfits,
        warning: 'AI kombinleri geçersizdi, gardırobunuzdan güvenli kombinler oluşturuldu.',
        validation_failed: true
      };
    }

    console.log('🎉 STRICT VALIDATION SUCCESSFUL!');
    console.log('✅ Final validated outfits:', validatedOutfits.length);
    
    return { 
      outfits: validatedOutfits,
      validation_passed: true,
      strict_validation: true
    };
    
  } catch (parseError) {
    console.error('❌ Failed to parse AI response:', parseError);
    console.log('🛟 Using fallback generator due to parse error');
    
    // Enhanced fallback with exact wardrobe items
    const fallbackOutfits = generateFallbackOutfits(wardrobeItems, occasion, weather);

    return {
      outfits: fallbackOutfits,
      warning: 'AI servisi kullanılamadı, gardırobunuzdan güvenli kombinler oluşturuldu.',
      fallback_used: true
    };
  }
}
